const { Octokit } = require('@octokit/rest');

// octokit should be authenticated with GITHUB_TOKEN from GA
const octokit = new Octokit({
    auth: process.env.GH_TOKEN,
});

(async () => {
    let waiPrNumber;
    let createPullRequestResult;

    try {
        const pullsListResult = await octokit.rest.pulls.list({
            owner: 'w3c',
            repo: 'wai-aria-practices'
        });
        console.info('pull.list.success');

        // check to see if a PR already exists with the head branch and use that PR's number instead
        for (let i = 0 ; i < pullsListResult.data.length ; i++) {
            let data = pullsListResult.data[i];
            if (data.head.ref === 'apg/' + process.env.APG_BRANCH) {
                waiPrNumber = data.number;
                break;
            }
        }

        if (!waiPrNumber) {
            createPullRequestResult = await octokit.rest.pulls.create({
                owner: 'w3c',
                repo: 'wai-aria-practices',
                head: 'apg/' + process.env.APG_BRANCH,
                base: 'main',
                title: 'apg/' + process.env.APG_BRANCH + ' generated by aria-practices',
                body: `Generated by https://github.com/w3c/aria-practices/commit/${process.env.APG_BRANCH}.`,
                draft: true,
                maintainer_can_modify: true
            });
            console.info('pull.create.success');
        }

        const getApgPrResult = await octokit.rest.pulls.get({
            owner: 'w3c',
            repo: 'aria-practices',
            pull_number: process.env.APG_PR_NUMBER
        });
        console.info('pull.get.success');

        let apgPrBody = getApgPrResult.data.body || '';
        let previewLinkIndex = apgPrBody.indexOf('[WAI Preview Link]');
        let previewLinkUrl = `https://deploy-preview-${waiPrNumber || createPullRequestResult.data.number}--wai-aria-practices2.netlify.app`;

        if (previewLinkIndex < 0) { // no preview link in PR body; append
            apgPrBody = `${apgPrBody}\n___\n[WAI Preview Link](${previewLinkUrl})`;
        } else { // replace existing preview link in PR body
            let stringRemainder = apgPrBody.substring(previewLinkIndex);
            let urlToChange = stringRemainder.match(/\(([^)]+)\)/)[1];
            apgPrBody = apgPrBody.replace(urlToChange, previewLinkUrl);
        }

        // creates preview link in aria-practices PR
        await octokit.rest.pulls.update({
            owner: 'w3c',
            repo: 'aria-practices',
            pull_number: process.env.APG_PR_NUMBER,
            body: apgPrBody
        });
        console.info('pull.update.success');
    } catch (e) {
        console.error('octokit.call.fail', e);
    }
})();
